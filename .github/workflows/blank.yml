# This is a basic workflow to help you get started with Actions

name: prototype

 Public Class Payment
 {
    Public String PaymentId;
    Public Decimal Amount;
    Public String CurrencyCode;
    Public DateTime PaymentDate;
    Public String PaymentMethod;
    Public String TransactionId;
    Public String Status;
}
    public class User
{
    public int UserID;
    public string Name;
    public string Email;
    }
on:
  using System;

public class LoyaltyPointsAccount
{
    public int AccountID { get; set; }
    public float PointsBalance { get; private set; }
    public float LifetimePointsEarned { get; private set; }
    public int NumberOfPastVisits { get; private set; }
    public DateTime LastTransactionDate { get; private set; }
    public DateTime AccountCreationDate { get; private set; }
    public float AvailableRewards { get; private set; }

    // Constructor
    public LoyaltyPointsAccount(int accountID, DateTime creationDate)
    {
        AccountID = accountID;
        PointsBalance = 0;
        LifetimePointsEarned = 0;
        NumberOfPastVisits = 0;
        LastTransactionDate = DateTime.MinValue;
        AccountCreationDate = creationDate;
        AvailableRewards = 0;
    }

    // Method to Add Points
    public void AddPoints(float transactionAmount)
    {
        float pointsEarned = transactionAmount / 10; // Example: Earn 1 point per $10 spent
        PointsBalance += pointsEarned;
        LifetimePointsEarned += pointsEarned;
        NumberOfPastVisits++;
        LastTransactionDate = DateTime.Now;

        Console.WriteLine($"Added {pointsEarned} points. New Balance: {PointsBalance}");
    }

    // Method to Redeem Rewards
    public bool RedeemRewards(float pointsToRedeem)
    {
        if (pointsToRedeem <= PointsBalance)
        {
            PointsBalance -= pointsToRedeem;
            AvailableRewards -= pointsToRedeem;
            Console.WriteLine($"Redeemed {pointsToRedeem} points. Remaining Balance: {PointsBalance}");
            return true;
        }
        else
        {
            Console.WriteLine("Insufficient points for redemption.");
            return false;
        }
    }

    // Method to Check Available Rewards
    public void CalculateAvailableRewards()
    {
        AvailableRewards = PointsBalance * 0.05f; // Example: 5% of points can be redeemed
        Console.WriteLine($"Available Rewards: {AvailableRewards}");
    }
}
# Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
